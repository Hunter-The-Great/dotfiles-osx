#!/bin/bash

PAD_FILE="pad.zsh"
EDITOR="${EDITOR:-nvim}"
LAST_RUN_FILE="/tmp/zsh_script_last.txt"

# Handle path argument if provided
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--path)
            if [[ -f "$2" ]]; then
                PAD_FILE="$2"
            else
                echo "Error: File '$2' does not exist"
                exit 1
            fi
            shift 2
            ;;
        -r|--repeat)
            if [[ ! -f "$LAST_RUN_FILE" ]]; then
                echo "No previous run found"
                exit 1
            fi
            # Read the last run details
            source "$LAST_RUN_FILE"
            if [[ -z "$LAST_BLOCK" || -z "$LAST_KEY" ]]; then
                echo "Invalid last run data"
                exit 1
            fi
            SELECTED_BLOCK="$LAST_BLOCK"
            KEY="$LAST_KEY"
            # Skip to execution
            goto_execution=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Usage: $0 [-p|--path <path/to/pad.zsh>] [-r|--repeat]"
            exit 1
            ;;
    esac
done

if [[ "$goto_execution" != "true" ]]; then
    # Extract block names marked with #@ <name>
    BLOCK_NAMES=$(grep -E '^#@ ' "$PAD_FILE" | sed 's/#@ //')

    # Select a block using fzf with keybindings
    SELECTED_OUTPUT=$(echo "$BLOCK_NAMES" | fzf \
        --header ' <cr>: window, <c-p> pane (unfocused), <c-f> pane (focused), <c-s> shell, <c-e> edit' \
        --prompt="Select block: " \
        --expect=ctrl-p,ctrl-s,ctrl-e,ctrl-f \
        --bind='ctrl-p:accept' \
        --bind='ctrl-s:accept' \
        --bind='ctrl-e:accept' \
        --bind='ctrl-f:accept')

    # Split the output into key press and selection
    KEY=$(echo "$SELECTED_OUTPUT" | head -1)
    SELECTED_BLOCK=$(echo "$SELECTED_OUTPUT" | tail -1)

    if [[ -z "$SELECTED_BLOCK" ]]; then
        echo "No block selected."
        exit 1
    fi

    # Save the selection for future repeat
    echo "LAST_BLOCK='$SELECTED_BLOCK'" > "$LAST_RUN_FILE"
    echo "LAST_KEY='$KEY'" >> "$LAST_RUN_FILE"
fi

# Extract the content of the selected block
BLOCK_CONTENT=$(awk -v block="#@ $SELECTED_BLOCK" '
    $0 == block {
        flag = 1
        next
    }
    /^$/ {
        if (flag) flag = 0
    }
    flag {
        print
    }
' "$PAD_FILE")

if [[ -z "$BLOCK_CONTENT" ]]; then
    echo "No content found for block: $SELECTED_BLOCK"
    exit 1
fi

# Check if the last non-empty line is exactly 'exit'
if echo "$BLOCK_CONTENT" | awk '/^[[:space:]]*$/ {next} {last=$0} END{if(last=="exit") exit 0; exit 1}'; then
    QUICK_EXIT=true
else
    QUICK_EXIT=false
fi

# Create a temporary file for the script
TEMP_FILE="/tmp/zsh_script.zsh"
echo "$BLOCK_CONTENT" > "$TEMP_FILE"

if [[ ! -f "$TEMP_FILE" ]]; then
    echo "Error: Temporary file creation failed."
    exit 1
fi

# Prepare the command to run
if [ "$QUICK_EXIT" = true ]; then
    CMD="zsh $TEMP_FILE"
else
    CMD="zsh $TEMP_FILE; echo \"Press Enter to close\"; read -r"
fi

find_script_pane() {
    tmux list-panes -F "#{pane_id} #{pane_title}" | grep 'zsh_script_pane' | cut -d' ' -f1
}

# Execute based on the key press
case "$KEY" in
    "ctrl-e")
        $EDITOR "$PAD_FILE"
        ;;
    "ctrl-s")
        eval "$CMD"
        ;;
    "ctrl-p")
        EXISTING_PANE=$(find_script_pane)
        if [ -n "$EXISTING_PANE" ]; then
            PANE_HEIGHT=$(tmux display -t "$EXISTING_PANE" -p '#{pane_height}')
            tmux kill-pane -t "$EXISTING_PANE"
            tmux split-window -v -l $PANE_HEIGHT "printf '\033]2;zsh_script_pane\033\\'; $CMD" \; select-pane -l
        else
            tmux split-window -v -l 25 "printf '\033]2;zsh_script_pane\033\\'; $CMD" \; select-pane -l
        fi
        ;;
    "ctrl-f")
        EXISTING_PANE=$(find_script_pane)
        if [ -n "$EXISTING_PANE" ]; then
            PANE_HEIGHT=$(tmux display -t "$EXISTING_PANE" -p '#{pane_height}')
            tmux kill-pane -t "$EXISTING_PANE"
            tmux split-window -v -l $PANE_HEIGHT "printf '\033]2;zsh_script_pane\033\\'; $CMD"
        else
            tmux split-window -v -l 25 "printf '\033]2;zsh_script_pane\033\\'; $CMD"
        fi
        ;;
    *)
        # Default: open in new window
        tmux new-window "$CMD"
        ;;
esac
